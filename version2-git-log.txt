commit d77fdb09858cef97e0fa2621c343833be9263e92
Author: annaemerick <anna.emerick@gmail.com>
Date:   Sun Apr 6 18:49:02 2025 +0000

    update

diff --git a/TokenizingV1-test.jpg b/TokenizingV1-test.jpg
deleted file mode 100644
index df9c8b9..0000000
Binary files a/TokenizingV1-test.jpg and /dev/null differ
diff --git a/TokenizingV1-test2.jpg b/TokenizingV1-test2.jpg
deleted file mode 100644
index 38ebde6..0000000
Binary files a/TokenizingV1-test2.jpg and /dev/null differ
diff --git a/convertingV1-test.jpeg b/convertingV1-test.jpeg
deleted file mode 100644
index b7f19f7..0000000
Binary files a/convertingV1-test.jpeg and /dev/null differ
diff --git a/convertingV2-test.jpeg b/convertingV2-test.jpeg
deleted file mode 100644
index da7619d..0000000
Binary files a/convertingV2-test.jpeg and /dev/null differ
diff --git a/convertingV3-test.jpeg b/convertingV3-test.jpeg
deleted file mode 100644
index a4a218b..0000000
Binary files a/convertingV3-test.jpeg and /dev/null differ

commit dcd17d3839efc09749479542a1fee9a3e5c36a15
Merge: c0a88aa 956bc12
Author: annaemerick <anna.emerick@gmail.com>
Date:   Fri Apr 4 17:02:08 2025 +0000

    Merge branch 'main' of https://github.com/annaemerick/CPR_FinalProject

commit c0a88aa2e8e8f433ca1b0d1d043d5584973597bb
Author: annaemerick <anna.emerick@gmail.com>
Date:   Fri Apr 4 17:00:54 2025 +0000

    update

diff --git a/converting.c b/converting.c
index 53dba50..dfc298f 100644
--- a/converting.c
+++ b/converting.c
@@ -24,5 +24,5 @@ printf("*** End of Converting Strings to int Demo ***\n\n"); //prints that progr
 
 /* Version 3 */
 
-} 
-//
+}
+

commit add5c39d86a30f82c1757020380a8ba48c0f9c52
Author: annaemerick <anna.emerick@gmail.com>
Date:   Fri Apr 4 17:00:00 2025 +0000

    update

diff --git a/converting.c b/converting.c
index b1ed4dd..53dba50 100644
--- a/converting.c
+++ b/converting.c
@@ -25,3 +25,4 @@ printf("*** End of Converting Strings to int Demo ***\n\n"); //prints that progr
 /* Version 3 */
 
 } 
+//

commit 2a83c221163be1efe6d0c82e22062d8c21497e12
Author: annaemerick <anna.emerick@gmail.com>
Date:   Fri Apr 4 16:58:21 2025 +0000

    upodate

diff --git a/a.out b/a.out
deleted file mode 100755
index d6fa41b..0000000
Binary files a/a.out and /dev/null differ

commit b6de8e210d066267ede8bd8cd96b6885dc783f8d
Author: annaemerick <anna.emerick@gmail.com>
Date:   Thu Apr 3 16:19:10 2025 +0000

    update

diff --git a/converting.c b/converting.c
index 53dba50..b1ed4dd 100644
--- a/converting.c
+++ b/converting.c
@@ -25,4 +25,3 @@ printf("*** End of Converting Strings to int Demo ***\n\n"); //prints that progr
 /* Version 3 */
 
 } 
-//

commit 6eba41084ed71228035e09caf71ed4099a51b4da
Author: annaemerick <anna.emerick@gmail.com>
Date:   Thu Apr 3 02:29:33 2025 +0000

    update

diff --git a/a.out b/a.out
index a12a385..d6fa41b 100755
Binary files a/a.out and b/a.out differ
diff --git a/converting.c b/converting.c
index 1ea1633..53dba50 100644
--- a/converting.c
+++ b/converting.c
@@ -2,10 +2,7 @@
 #define BUFFER_SIZE 80 //set capacity of BUFFER_SIZE as 80
 #include "converting.h" //include header file
 
-int main (void) {
-    converting ();
-    return 0;
-}
+
 /* Version 1 */
 void converting(void) {  //this function will convert an integer string to an integer number
 printf ("*** Start of Converting Strings to int Demo ***\n") ;
diff --git a/fundamentals.c b/fundamentals.c
new file mode 100644
index 0000000..7deb585
--- /dev/null
+++ b/fundamentals.c
@@ -0,0 +1,56 @@
+// FUNDAMENTALS MODULE SOURCE
+#define _CRT_SECURE_NO_WARNINGS
+//this is the  max size for input string the user can type in
+//It stops the program from handling strings that are too long, preventing errors.
+#define BUFFER_SIZE 80  
+//This sets the max size for the number the user can type (the position in the string)
+//It makes sure the program doesn’t accept too much data for this part.
+#define NUM_INPUT_SIZE 10
+#include "fundamentals.h"
+
+
+/*Fundamentals module
+*
+V1: takes a string and a position then displays the character at the given position*/
+void fundamentals(void) {
+
+    /* Version 1 */
+
+    printf("*** Start of index Strings DEMO *** \n"); // /*This prints a message to let the user know the program is starting*/
+    char buffer1[BUFFER_SIZE]; //This creates a storage space (buffer1) to hold the user’s input. It can store up to 80 characters because of the BUFFER_SIZE limit.
+    /**This creates another box (called 'numInput') to store the number the user types for the character position.
+    It can hold up to 10 characters because of the NUM_INPUT_SIZE limit*/
+    char numInput[NUM_INPUT_SIZE];
+    size_t position; //This is where the program stores the position after converting it into a number.
+    do {
+        /*This loop runs until the user types "q" to quit, allowing multiple inputs without restarting the program.*/
+        printf("Type not empty string (q - to quit):\n");
+
+        fgets(buffer1, BUFFER_SIZE, stdin);   // Read user input
+
+        buffer1[strlen(buffer1) - 1] = '\0'; // Removes new line character, adds NULL
+        // Check if want to quit
+        if (strcmp(buffer1, "q") != 0) {
+
+            printf("Type the character position within the string:\n");
+            // Read input string
+            fgets(numInput, NUM_INPUT_SIZE, stdin);
+            // Removes new line character, adds NULL
+            numInput[strlen(numInput) - 1] = '\0';
+            // Convert input string to integer
+            position = atoi(numInput);
+            //Check if position is too big
+            if (position >= strlen(buffer1)) {
+                position = strlen(buffer1) - 1;
+                printf("Too big... Position reduced to max. available\n");
+            }
+            // Show character and position
+            printf("The character found at %d position is \'%c\'\n", (int)position, buffer1[position]);
+        }
+        /* Continues the loop as long as the user does not input "q".
+    This allows repeated demonstrations without restarting the program*/
+    } while (strcmp(buffer1, "q") != 0);
+    /** Displays a message indicating the end of the program's functionality.
+    This provides closure to the user and signals that the demonstration is complete*/
+    printf("*** End of Indexing Strings Demo ***\n\n");
+}
\ No newline at end of file
diff --git a/fundamentals.h b/fundamentals.h
new file mode 100644
index 0000000..24b3313
--- /dev/null
+++ b/fundamentals.h
@@ -0,0 +1,8 @@
+//FUNDAMENTALS MODULE HEADER
+#ifndef FUNDAMENTALS_H
+#define FUNDAMENTALS_H
+#include <string.h>
+#include <stdlib.h>
+#include <stdio.h>
+void fundamentals(void);
+#endif
\ No newline at end of file
diff --git a/main.c b/main.c
index 7b469a5..f5e174c 100644
--- a/main.c
+++ b/main.c
@@ -1,7 +1,7 @@
 #include "fundamentals.h"
 #include "manipulating.h"
 #include "converting.h"
-#include "tokenizing"
+#include "tokenizing.h"
 
 int main(void)
 {
@@ -12,7 +12,7 @@ int main(void)
         printf("2 - Manipulating\n");
         printf("3 - Converting\n");
         printf("4 - Tokenizing\n");
-        printf("0 - Exit");
+        printf("0 - Exit\n");
         printf("Which module to run? \n");
         fgets(buff, 10, stdin);
         switch (buff[0])
diff --git a/manipulating.c b/manipulating.c
index cfd1328..c82c70b 100644
--- a/manipulating.c
+++ b/manipulating.c
@@ -1,10 +1,7 @@
 #define BUFFER_SIZE 80  // Define the size for input strings
 #include "manipulating.h"
 
-int main (void) {
-    manipulating();
-    return 0;
-}
+
 void manipulating(void) 
 {
     /* Version 1 */     // Function to demonstrate string concatenation
diff --git a/tokenizing.c b/tokenizing.c
index 292459a..a312c66 100644
--- a/tokenizing.c
+++ b/tokenizing.c
@@ -3,10 +3,7 @@
 #define BUFFER_SIZE 300 //this is settings our input buffer to a max of 300 characters
 #include "tokenizing.h" // This makes sure to include the tokenizing header file
 
-int main (void) {
-    tokenizing();
-    return 0;
-}
+
 //V1
 void tokenizing(void) { // this is the function declaration
     printf("*** Start of Tokenizing Words Demo ***\n");   //The beginning message for the user to let them know the demo has started

commit 42f0a65e651b8ca0d55949cd1c1c4705c562d7b3
Author: annaemerick <anna.emerick@gmail.com>
Date:   Thu Apr 3 01:15:33 2025 +0000

    la

diff --git a/fundamentals.c b/fundamentals.c
deleted file mode 100644
index b60646a..0000000
--- a/fundamentals.c
+++ /dev/null
@@ -1,60 +0,0 @@
-// FUNDAMENTALS MODULE SOURCE
-#define _CRT_SECURE_NO_WARNINGS
-//this is the  max size for input string the user can type in
-//It stops the program from handling strings that are too long, preventing errors.
-#define BUFFER_SIZE 80  
-//This sets the max size for the number the user can type (the position in the string)
-//It makes sure the program doesn’t accept too much data for this part.
-#define NUM_INPUT_SIZE 10
-#include "fundamentals.h"
-
-int main (void) {
-    fundamentals();
-    return 0;
-}
-
-/*Fundamentals module
-*
-V1: takes a string and a position then displays the character at the given position*/
-void fundamentals(void) {
-
-    /* Version 1 */
-
-    printf("*** Start of index Strings DEMO *** \n"); // /*This prints a message to let the user know the program is starting*/
-    char buffer1[BUFFER_SIZE]; //This creates a storage space (buffer1) to hold the user’s input. It can store up to 80 characters because of the BUFFER_SIZE limit.
-    /**This creates another box (called 'numInput') to store the number the user types for the character position.
-    It can hold up to 10 characters because of the NUM_INPUT_SIZE limit*/
-    char numInput[NUM_INPUT_SIZE];
-    size_t position; //This is where the program stores the position after converting it into a number.
-    do {
-        /*This loop runs until the user types "q" to quit, allowing multiple inputs without restarting the program.*/
-        printf("Type not empty string (q - to quit):\n");
-
-        fgets(buffer1, BUFFER_SIZE, stdin);   // Read user input
-
-        buffer1[strlen(buffer1) - 1] = '\0'; // Removes new line character, adds NULL
-        // Check if want to quit
-        if (strcmp(buffer1, "q") != 0) {
-
-            printf("Type the character position within the string:\n");
-            // Read input string
-            fgets(numInput, NUM_INPUT_SIZE, stdin);
-            // Removes new line character, adds NULL
-            numInput[strlen(numInput) - 1] = '\0';
-            // Convert input string to integer
-            position = atoi(numInput);
-            //Check if position is too big
-            if (position >= strlen(buffer1)) {
-                position = strlen(buffer1) - 1;
-                printf("Too big... Position reduced to max. available\n");
-            }
-            // Show character and position
-            printf("The character found at %d position is \'%c\'\n", (int)position, buffer1[position]);
-        }
-        /* Continues the loop as long as the user does not input "q".
-    This allows repeated demonstrations without restarting the program*/
-    } while (strcmp(buffer1, "q") != 0);
-    /** Displays a message indicating the end of the program's functionality.
-    This provides closure to the user and signals that the demonstration is complete*/
-    printf("*** End of Indexing Strings Demo ***\n\n");
-}
\ No newline at end of file
diff --git a/fundamentals.h b/fundamentals.h
deleted file mode 100644
index daacf46..0000000
--- a/fundamentals.h
+++ /dev/null
@@ -1,7 +0,0 @@
-//FUNDAMENTALS MODULE HEADER
-#ifndef FUNDAMENTALS_H
-#define FUNDAMENTALS_H
-#include <string.h>
-#include <stdio.h>
-void fundamentals(void);
-#endif
\ No newline at end of file

commit 50b0afd9bd7e972c22544b1b1f62da51e89f5e59
Author: annaemerick <anna.emerick@gmail.com>
Date:   Thu Apr 3 01:13:49 2025 +0000

    update

diff --git a/converting.c b/converting.c
index 91b9865..1ea1633 100644
--- a/converting.c
+++ b/converting.c
@@ -27,4 +27,5 @@ printf("*** End of Converting Strings to int Demo ***\n\n"); //prints that progr
 
 /* Version 3 */
 
-}
+} 
+//

commit 903dcaaf346778ac5dd8f6cccd33b57ec7b7ecaa
Author: annaemerick <anna.emerick@gmail.com>
Date:   Thu Apr 3 01:07:18 2025 +0000

    update

diff --git a/converting.c b/converting.c
index ec74e40..91b9865 100644
--- a/converting.c
+++ b/converting.c
@@ -28,5 +28,3 @@ printf("*** End of Converting Strings to int Demo ***\n\n"); //prints that progr
 /* Version 3 */
 
 }
-
-

commit 2c07fe3216734044cec97c0e1f92eafb28396e08
Author: annaemerick <anna.emerick@gmail.com>
Date:   Thu Apr 3 00:52:36 2025 +0000

    update

diff --git a/a.out b/a.out
index b09f306..a12a385 100755
Binary files a/a.out and b/a.out differ
diff --git a/fundamentals.c b/fundamentals.c
index e69de29..b60646a 100644
--- a/fundamentals.c
+++ b/fundamentals.c
@@ -0,0 +1,60 @@
+// FUNDAMENTALS MODULE SOURCE
+#define _CRT_SECURE_NO_WARNINGS
+//this is the  max size for input string the user can type in
+//It stops the program from handling strings that are too long, preventing errors.
+#define BUFFER_SIZE 80  
+//This sets the max size for the number the user can type (the position in the string)
+//It makes sure the program doesn’t accept too much data for this part.
+#define NUM_INPUT_SIZE 10
+#include "fundamentals.h"
+
+int main (void) {
+    fundamentals();
+    return 0;
+}
+
+/*Fundamentals module
+*
+V1: takes a string and a position then displays the character at the given position*/
+void fundamentals(void) {
+
+    /* Version 1 */
+
+    printf("*** Start of index Strings DEMO *** \n"); // /*This prints a message to let the user know the program is starting*/
+    char buffer1[BUFFER_SIZE]; //This creates a storage space (buffer1) to hold the user’s input. It can store up to 80 characters because of the BUFFER_SIZE limit.
+    /**This creates another box (called 'numInput') to store the number the user types for the character position.
+    It can hold up to 10 characters because of the NUM_INPUT_SIZE limit*/
+    char numInput[NUM_INPUT_SIZE];
+    size_t position; //This is where the program stores the position after converting it into a number.
+    do {
+        /*This loop runs until the user types "q" to quit, allowing multiple inputs without restarting the program.*/
+        printf("Type not empty string (q - to quit):\n");
+
+        fgets(buffer1, BUFFER_SIZE, stdin);   // Read user input
+
+        buffer1[strlen(buffer1) - 1] = '\0'; // Removes new line character, adds NULL
+        // Check if want to quit
+        if (strcmp(buffer1, "q") != 0) {
+
+            printf("Type the character position within the string:\n");
+            // Read input string
+            fgets(numInput, NUM_INPUT_SIZE, stdin);
+            // Removes new line character, adds NULL
+            numInput[strlen(numInput) - 1] = '\0';
+            // Convert input string to integer
+            position = atoi(numInput);
+            //Check if position is too big
+            if (position >= strlen(buffer1)) {
+                position = strlen(buffer1) - 1;
+                printf("Too big... Position reduced to max. available\n");
+            }
+            // Show character and position
+            printf("The character found at %d position is \'%c\'\n", (int)position, buffer1[position]);
+        }
+        /* Continues the loop as long as the user does not input "q".
+    This allows repeated demonstrations without restarting the program*/
+    } while (strcmp(buffer1, "q") != 0);
+    /** Displays a message indicating the end of the program's functionality.
+    This provides closure to the user and signals that the demonstration is complete*/
+    printf("*** End of Indexing Strings Demo ***\n\n");
+}
\ No newline at end of file
diff --git a/fundamentals.h b/fundamentals.h
new file mode 100644
index 0000000..daacf46
--- /dev/null
+++ b/fundamentals.h
@@ -0,0 +1,7 @@
+//FUNDAMENTALS MODULE HEADER
+#ifndef FUNDAMENTALS_H
+#define FUNDAMENTALS_H
+#include <string.h>
+#include <stdio.h>
+void fundamentals(void);
+#endif
\ No newline at end of file

commit 956bc126211c142fa017b2ce294c3c6509c289b1
Author: annaemerick <anna.emerick@gmail.com>
Date:   Wed Apr 2 20:26:31 2025 -0400

    Add files via upload

diff --git a/convertingV1-test.jpeg b/convertingV1-test.jpeg
new file mode 100644
index 0000000..b7f19f7
Binary files /dev/null and b/convertingV1-test.jpeg differ
diff --git a/convertingV2-test.jpeg b/convertingV2-test.jpeg
new file mode 100644
index 0000000..da7619d
Binary files /dev/null and b/convertingV2-test.jpeg differ
diff --git a/convertingV3-test.jpeg b/convertingV3-test.jpeg
new file mode 100644
index 0000000..a4a218b
Binary files /dev/null and b/convertingV3-test.jpeg differ

commit 02ce159ea0a302809e30113d03a4c2cf8a641d1a
Author: annaemerick <anna.emerick@gmail.com>
Date:   Wed Apr 2 20:13:03 2025 -0400

    Rename Tokenizing2 test.jpg to TokenizingV1-test2.jpg

diff --git a/Tokenizing2 test.jpg b/TokenizingV1-test2.jpg
similarity index 100%
rename from Tokenizing2 test.jpg
rename to TokenizingV1-test2.jpg

commit bc73a6ddc980f12b39f1da6a495934bd31c544c3
Author: annaemerick <anna.emerick@gmail.com>
Date:   Wed Apr 2 20:12:24 2025 -0400

    Rename Tokenizing1 test.jpg to TokenizingV1-test.jpg

diff --git a/Tokenizing1 test.jpg b/TokenizingV1-test.jpg
similarity index 100%
rename from Tokenizing1 test.jpg
rename to TokenizingV1-test.jpg

commit 52f5b172f54c85063a9d31cf5ea1c35cfe24c29e
Author: annaemerick <anna.emerick@gmail.com>
Date:   Wed Apr 2 20:11:05 2025 -0400

    Add files via upload

diff --git a/Tokenizing1 test.jpg b/Tokenizing1 test.jpg
new file mode 100644
index 0000000..df9c8b9
Binary files /dev/null and b/Tokenizing1 test.jpg differ
diff --git a/Tokenizing2 test.jpg b/Tokenizing2 test.jpg
new file mode 100644
index 0000000..38ebde6
Binary files /dev/null and b/Tokenizing2 test.jpg differ

commit 25dd15bf9e853b72f2a211182b06cbbe5c993474
Author: annaemerick <anna.emerick@gmail.com>
Date:   Thu Apr 3 00:09:59 2025 +0000

    update

diff --git a/a.out b/a.out
index f885335..b09f306 100755
Binary files a/a.out and b/a.out differ
diff --git a/converting.h b/converting.h
index 44470f9..2288b46 100644
--- a/converting.h
+++ b/converting.h
@@ -1,8 +1,8 @@
 
-#ifndef _CONVERTING_H_ 
-#define _CONVERTING_H_
-#include <stdio.h>
-#include <string.h>
-#include <stdlib.h>
-void converting(void);
-#endif
+#ifndef _CONVERTING_H_ //If _CONVERTING_H_ is not defined
+#define _CONVERTING_H_ //Define _CONVERTING_H_ to prevent duplicate inclusion
+#include <stdio.h> //For input/output functions like printf(), fgets()
+#include <string.h> //For string functions 
+#include <stdlib.h> //general-purpose standard libraby
+void converting(void); //Function declaration
+#endif //End of include guard
diff --git a/manipulating.c b/manipulating.c
index c82c70b..cfd1328 100644
--- a/manipulating.c
+++ b/manipulating.c
@@ -1,7 +1,10 @@
 #define BUFFER_SIZE 80  // Define the size for input strings
 #include "manipulating.h"
 
-
+int main (void) {
+    manipulating();
+    return 0;
+}
 void manipulating(void) 
 {
     /* Version 1 */     // Function to demonstrate string concatenation
diff --git a/manipulating.h b/manipulating.h
new file mode 100644
index 0000000..b8ba312
--- /dev/null
+++ b/manipulating.h
@@ -0,0 +1,7 @@
+// MANIPULATING MODULE HEADER 
+#ifndef _MANIPULATING_H_	 // If _MANIPULATING_H_ is not defined
+#define _MANIPULATING_H_	// Define _MANIPULATING_H_ to prevent duplicate inclusion
+#include <stdio.h>		  // For input/output functions like printf(), fgets()
+#include <string.h>		 // For string functions like strlen(), strcmp(), strcat()
+void manipulating(void);  // Function declaration (prototype)
+#endif      // End of include guard
\ No newline at end of file
diff --git a/tokenizing.h b/tokenizing.h
index 91976ce..a6c69bc 100644
--- a/tokenizing.h
+++ b/tokenizing.h
@@ -1,7 +1,7 @@
 // TOKENIZING MODULE HEADER
-#ifndef _TOKENIZING_H_
-#define _TOKENIZING_H_
-#include <stdio.h>
-#include <string.h>
-void tokenizing(void);
-#endif
\ No newline at end of file
+#ifndef _TOKENIZING_H_ //If _TOKENIZING_H_ is not defined
+#define _TOKENIZING_H_ //Define _TOKENIZING_H_ to prevent duplicate inclusion
+#include <stdio.h> //For input/output functions like printf(), fgets()
+#include <string.h> //For string functions 
+void tokenizing(void); //Function declaration
+#endif //End of include guard
\ No newline at end of file

commit 16867a3dcaf4657819952bd87fa518f73613d0ea
Author: annaemerick <anna.emerick@gmail.com>
Date:   Wed Apr 2 23:29:39 2025 +0000

    update

diff --git a/a.out b/a.out
index ee43723..f885335 100755
Binary files a/a.out and b/a.out differ
diff --git a/converting.c b/converting.c
new file mode 100644
index 0000000..ec74e40
--- /dev/null
+++ b/converting.c
@@ -0,0 +1,32 @@
+// // CONVERTING MODULE SOURCE
+#define BUFFER_SIZE 80 //set capacity of BUFFER_SIZE as 80
+#include "converting.h" //include header file
+
+int main (void) {
+    converting ();
+    return 0;
+}
+/* Version 1 */
+void converting(void) {  //this function will convert an integer string to an integer number
+printf ("*** Start of Converting Strings to int Demo ***\n") ;
+char intString [BUFFER_SIZE]; //variable to store user input
+int intNumber; //variable to store the result of the convertion
+do {
+printf ("Type an int numeric string (q - to quit) : \n"); //prompt the user to enter an integer numeric string
+fgets (intString, BUFFER_SIZE, stdin); //reads user input
+intString [strlen(intString) - 1] = '\0'; //makes sure that string ends with null character ('\0')
+if (strcmp (intString, "q") != 0) { //compare the given string to "q" (key to end the program). Convertion will run if they are not equal
+intNumber = atoi(intString); //converts the numeric string to integer, if the string is invalid, it will return 0
+printf ("Converted number is %d\n", intNumber); //output the converted number
+}
+}
+ while (strcmp (intString, "q") != 0); //program will run until user enter "q"
+printf("*** End of Converting Strings to int Demo ***\n\n"); //prints that program ended
+
+/* Version 2 */
+
+/* Version 3 */
+
+}
+
+
diff --git a/converting.h b/converting.h
index 577effa..44470f9 100644
--- a/converting.h
+++ b/converting.h
@@ -4,7 +4,5 @@
 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>
-void convertingV1(void);
-void convertingV2(void);
-void convertingV3(void);
+void converting(void);
 #endif
diff --git a/convertingMain.c b/convertingMain.c
deleted file mode 100644
index 0d58ea2..0000000
--- a/convertingMain.c
+++ /dev/null
@@ -1,7 +0,0 @@
-#include <stdio.h>
-#include "converting.h"
-
-int main(void) {
-    convertingV3();
-    return 0;
-}
\ No newline at end of file
diff --git a/convertingV1.c b/convertingV1.c
deleted file mode 100644
index de81c96..0000000
--- a/convertingV1.c
+++ /dev/null
@@ -1,23 +0,0 @@
-
-// // CONVERTING MODULE SOURCE
-#define BUFFER_SIZE 80
-#include "converting.h"
-// V1
-
-void convertingV1(void) {
-printf ("*** Start of Converting Strings to int Demo ***\n") ;
-char intString [BUFFER_SIZE];
-int intNumber;
-do {
-printf ("Type an int numeric string (q - to quit) : \n");
-fgets (intString, BUFFER_SIZE, stdin);
-intString [strlen(intString) - 1] = '\0';
-if (strcmp (intString, "q") != 0) {
-intNumber = atoi (intString);
-printf ("Converted number is %d\n", intNumber);
-}
-}
- while (strcmp (intString, "9") != 0); 
-printf("*** End of Converting Strings to int Demo ***\n\n");
- }
-
diff --git a/convertingV2.c b/convertingV2.c
deleted file mode 100644
index ab3b034..0000000
--- a/convertingV2.c
+++ /dev/null
@@ -1,19 +0,0 @@
-#define BUFFER_SIZE 80
-#include "converting.h"
-// V1
-
-void convertingV2(void) {
-    printf ("*** Start of Converting Strings to double Demo ***\n") ;
-char doubleString [BUFFER_SIZE];
-double doubleNumber;
-do {
-printf ("Type the double numeric string (q - to quit) : \n");
-fgets (doubleString, BUFFER_SIZE, stdin) ;
-doubleString [strlen(doubleString) - 1] = '\0';
-if ((strcmp(doubleString, "a") != 0)) {
-doubleNumber = atof (doubleString);
-printf ("Converted number is %f\n", doubleNumber);
-}
-} while (strcmp(doubleString, "q") != 0);
-printf("*** End of Converting Strings to double Demo ***\n\n");
-}
\ No newline at end of file
diff --git a/convertingV3.c b/convertingV3.c
deleted file mode 100644
index 6019162..0000000
--- a/convertingV3.c
+++ /dev/null
@@ -1,19 +0,0 @@
-#define BUFFER_SIZE 80
-#include "converting.h"
-// V3
-
-void convertingV3(void) {
-    printf("*** Start of Converting Strings to long Demo ***\n");
-char longString[BUFFER_SIZE];
-long longNumber;
-do {
-	printf("Type the long numeric string (q - to quit): \n");
-	fgets(longString, BUFFER_SIZE, stdin);
-	longString[strlen(longString) - 1] = '\0';
-	if ((strcmp(longString, "q") != 0)) {
-		longNumber = atol(longString);
-		printf("Converted number is %ld\n", longNumber);
-	}
-} while (strcmp(longString, "q") != 0);
-printf("*** End of Converting Strings to long Demo ***\n\n");
-}
\ No newline at end of file
diff --git a/fundamentals.c b/fundamentals.c
new file mode 100644
index 0000000..e69de29
diff --git a/main.c b/main.c
new file mode 100644
index 0000000..7b469a5
--- /dev/null
+++ b/main.c
@@ -0,0 +1,31 @@
+#include "fundamentals.h"
+#include "manipulating.h"
+#include "converting.h"
+#include "tokenizing"
+
+int main(void)
+{
+    char buff[10];
+    do
+    {
+        printf("1 - Fundamentals\n");
+        printf("2 - Manipulating\n");
+        printf("3 - Converting\n");
+        printf("4 - Tokenizing\n");
+        printf("0 - Exit");
+        printf("Which module to run? \n");
+        fgets(buff, 10, stdin);
+        switch (buff[0])
+        {
+            case '1': fundamentals();
+                break;
+            case '2': manipulating();
+                break;
+            case '3': converting();
+                break;
+            case '4': tokenizing();
+                break;
+        }
+    } while (buff[0] != '0');
+    return 0;
+}
\ No newline at end of file
diff --git a/manipulating.c b/manipulating.c
new file mode 100644
index 0000000..c82c70b
--- /dev/null
+++ b/manipulating.c
@@ -0,0 +1,59 @@
+#define BUFFER_SIZE 80  // Define the size for input strings
+#include "manipulating.h"
+
+
+void manipulating(void) 
+{
+    /* Version 1 */     // Function to demonstrate string concatenation
+        // Print header to indicate the start of the demo
+        printf("*** Start of Concatenating Strings Demo ***\n");
+
+        // Declare two strings to store user input
+        char string1[BUFFER_SIZE];
+        char string2[BUFFER_SIZE];
+
+        // Start a loop to allow repeated concatenation until "q" is entered
+        do {
+            // Prompt the user to enter the first string
+            printf("Type the 1st string (q - to quit) : \n");
+
+            // Read the first string from input
+            fgets(string1, BUFFER_SIZE, stdin);
+
+            // Remove the newline character at the end of the string
+            string1[strlen(string1) - 1] = '\0';
+
+            // If the first string is NOT "q", proceed with concatenation
+            if (strcmp(string1, "q") != 0) {
+                // Prompt the user for the second string
+                printf("Type the 2nd string: \n");
+
+                // Read the second string from input
+                fgets(string2, BUFFER_SIZE, stdin);
+
+                // Remove the newline character at the end of the second string
+                string2[strlen(string2) - 1] = '\0';
+
+                // Safely concatenate the strings, ensuring no buffer overflow
+                strncat(string1, string2, BUFFER_SIZE - strlen(string1) - 1);
+
+                //// Concatenate the second string to the first
+                //strcat(string1, string2); // possible buffer overflow
+
+                // Display the resulting concatenated string
+                printf("Concatenated string is \'%s\'\n", string1);
+            }
+
+            // Continue looping until the user enters "q" as the first string
+        } while (strcmp(string1, "q") != 0);
+
+        // Print footer to indicate the end of the demo
+        printf("*** End of Concatenating Strings Demo ***\n\n");
+    }
+
+
+/* Version 2 */     // Function to demonstrate string comparison
+
+
+/* Version 3 */      // Function to demonstrate string searching
+
diff --git a/tokenizing.c b/tokenizing.c
new file mode 100644
index 0000000..292459a
--- /dev/null
+++ b/tokenizing.c
@@ -0,0 +1,30 @@
+// TOKENIZING MODULE SOURCE
+//#define _CRT_SECURE_NO_WARNINGS //this disables the security warnings (Visual Studio)
+#define BUFFER_SIZE 300 //this is settings our input buffer to a max of 300 characters
+#include "tokenizing.h" // This makes sure to include the tokenizing header file
+
+int main (void) {
+    tokenizing();
+    return 0;
+}
+//V1
+void tokenizing(void) { // this is the function declaration
+    printf("*** Start of Tokenizing Words Demo ***\n");   //The beginning message for the user to let them know the demo has started
+    char  words[BUFFER_SIZE + 1]; //this creates an array with the buffer size limit, this is what will be used to store user input //A +1 was added to fix an issue where it would not drop anything over 300 charac
+    char* nextWord = NULL; // this creates our pointer and sets it to a safe empty state
+    int wordsCounter; // declares our variable to track our number of words
+    do {
+        printf("Type a few words separated by space (q - quit):\n"); // the beginning of our loop prompting the  user for input
+        fgets(words, BUFFER_SIZE, stdin); // this reads the user input and ensure that the input does not exceed BUFFER_SIZE
+        words[strlen(words) - 1] = '\0'; // this repalces the newline character that fgets generates and replaces it will null characters
+        if (strcmp(words, "q") != 0) { // compares thje user input to the string "q" if the input is not q it tokenizes the input
+            nextWord = strtok(words, " "); // this splits the input into words separated by spaces the first first is store in nextword
+            wordsCounter = 1;  //this sets wordscounter to 1 before processing the first word
+            while (nextWord) { //the loop to process each word begins
+                printf("Word #%d is \'%s\'\n", wordsCounter++, nextWord); //prints the current word number and the word itself
+                nextWord = strtok(NULL, " "); //retrieves the next word from the string if there is one
+            }
+        }
+    } while (strcmp(words, "q") != 0); // this continutes the loop until the user enters the letter q
+    printf("*** End of Tokenizing Words Demo ***\n\n"); // message to let the user know that the demo is over
+}
\ No newline at end of file
diff --git a/tokenizing.h b/tokenizing.h
new file mode 100644
index 0000000..91976ce
--- /dev/null
+++ b/tokenizing.h
@@ -0,0 +1,7 @@
+// TOKENIZING MODULE HEADER
+#ifndef _TOKENIZING_H_
+#define _TOKENIZING_H_
+#include <stdio.h>
+#include <string.h>
+void tokenizing(void);
+#endif
\ No newline at end of file

commit b6fcad0a2662337a078b3e9244869df9633c099f
Author: annaemerick <anna.emerick@gmail.com>
Date:   Fri Mar 28 15:52:48 2025 +0000

    update

diff --git a/a.out b/a.out
index 41e01bc..ee43723 100755
Binary files a/a.out and b/a.out differ

commit c42b600e65564f855b3540bd25d3f7b50d7464a5
Author: annaemerick <anna.emerick@gmail.com>
Date:   Fri Mar 28 15:51:04 2025 +0000

    update

diff --git a/converting.h b/converting.h
index 0af97e1..577effa 100644
--- a/converting.h
+++ b/converting.h
@@ -4,7 +4,7 @@
 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>
-void converting (void);
+void convertingV1(void);
 void convertingV2(void);
 void convertingV3(void);
 #endif
diff --git a/convertingV1.c b/convertingV1.c
index 39fdfd2..de81c96 100644
--- a/convertingV1.c
+++ b/convertingV1.c
@@ -4,7 +4,7 @@
 #include "converting.h"
 // V1
 
-void converting(void) {
+void convertingV1(void) {
 printf ("*** Start of Converting Strings to int Demo ***\n") ;
 char intString [BUFFER_SIZE];
 int intNumber;

commit 1c9514f3b9f3057ce248ac1332823b3ca2a62430
Author: annaemerick <anna.emerick@gmail.com>
Date:   Fri Mar 28 15:35:49 2025 +0000

    update

diff --git a/a.out b/a.out
index 2c436a2..41e01bc 100755
Binary files a/a.out and b/a.out differ
diff --git a/converting.h b/converting.h
index 70f06c8..0af97e1 100644
--- a/converting.h
+++ b/converting.h
@@ -5,6 +5,6 @@
 #include <string.h>
 #include <stdlib.h>
 void converting (void);
+void convertingV2(void);
+void convertingV3(void);
 #endif
-
-void converting(void);
\ No newline at end of file
diff --git a/convertingMain.c b/convertingMain.c
index 076f6c6..0d58ea2 100644
--- a/convertingMain.c
+++ b/convertingMain.c
@@ -2,6 +2,6 @@
 #include "converting.h"
 
 int main(void) {
-    converting();
+    convertingV3();
     return 0;
 }
\ No newline at end of file
diff --git a/convertingV1.c b/convertingV1.c
index fa4c272..39fdfd2 100644
--- a/convertingV1.c
+++ b/convertingV1.c
@@ -10,7 +10,7 @@ char intString [BUFFER_SIZE];
 int intNumber;
 do {
 printf ("Type an int numeric string (q - to quit) : \n");
-fgets (intString, BUFFER_SIZE, stdin) ;
+fgets (intString, BUFFER_SIZE, stdin);
 intString [strlen(intString) - 1] = '\0';
 if (strcmp (intString, "q") != 0) {
 intNumber = atoi (intString);
diff --git a/convertingV2.c b/convertingV2.c
new file mode 100644
index 0000000..ab3b034
--- /dev/null
+++ b/convertingV2.c
@@ -0,0 +1,19 @@
+#define BUFFER_SIZE 80
+#include "converting.h"
+// V1
+
+void convertingV2(void) {
+    printf ("*** Start of Converting Strings to double Demo ***\n") ;
+char doubleString [BUFFER_SIZE];
+double doubleNumber;
+do {
+printf ("Type the double numeric string (q - to quit) : \n");
+fgets (doubleString, BUFFER_SIZE, stdin) ;
+doubleString [strlen(doubleString) - 1] = '\0';
+if ((strcmp(doubleString, "a") != 0)) {
+doubleNumber = atof (doubleString);
+printf ("Converted number is %f\n", doubleNumber);
+}
+} while (strcmp(doubleString, "q") != 0);
+printf("*** End of Converting Strings to double Demo ***\n\n");
+}
\ No newline at end of file
diff --git a/convertingV3.c b/convertingV3.c
new file mode 100644
index 0000000..6019162
--- /dev/null
+++ b/convertingV3.c
@@ -0,0 +1,19 @@
+#define BUFFER_SIZE 80
+#include "converting.h"
+// V3
+
+void convertingV3(void) {
+    printf("*** Start of Converting Strings to long Demo ***\n");
+char longString[BUFFER_SIZE];
+long longNumber;
+do {
+	printf("Type the long numeric string (q - to quit): \n");
+	fgets(longString, BUFFER_SIZE, stdin);
+	longString[strlen(longString) - 1] = '\0';
+	if ((strcmp(longString, "q") != 0)) {
+		longNumber = atol(longString);
+		printf("Converted number is %ld\n", longNumber);
+	}
+} while (strcmp(longString, "q") != 0);
+printf("*** End of Converting Strings to long Demo ***\n\n");
+}
\ No newline at end of file

commit 0a87fab5a40180d1df85c1dc64da6eb090aa5de4
Author: annaemerick <anna.emerick@gmail.com>
Date:   Thu Mar 27 18:35:10 2025 +0000

    cprFinal

diff --git a/a.out b/a.out
new file mode 100755
index 0000000..2c436a2
Binary files /dev/null and b/a.out differ
diff --git a/converting.h b/converting.h
new file mode 100644
index 0000000..70f06c8
--- /dev/null
+++ b/converting.h
@@ -0,0 +1,10 @@
+
+#ifndef _CONVERTING_H_ 
+#define _CONVERTING_H_
+#include <stdio.h>
+#include <string.h>
+#include <stdlib.h>
+void converting (void);
+#endif
+
+void converting(void);
\ No newline at end of file
diff --git a/convertingMain.c b/convertingMain.c
new file mode 100644
index 0000000..076f6c6
--- /dev/null
+++ b/convertingMain.c
@@ -0,0 +1,7 @@
+#include <stdio.h>
+#include "converting.h"
+
+int main(void) {
+    converting();
+    return 0;
+}
\ No newline at end of file
diff --git a/convertingV1.c b/convertingV1.c
new file mode 100644
index 0000000..fa4c272
--- /dev/null
+++ b/convertingV1.c
@@ -0,0 +1,23 @@
+
+// // CONVERTING MODULE SOURCE
+#define BUFFER_SIZE 80
+#include "converting.h"
+// V1
+
+void converting(void) {
+printf ("*** Start of Converting Strings to int Demo ***\n") ;
+char intString [BUFFER_SIZE];
+int intNumber;
+do {
+printf ("Type an int numeric string (q - to quit) : \n");
+fgets (intString, BUFFER_SIZE, stdin) ;
+intString [strlen(intString) - 1] = '\0';
+if (strcmp (intString, "q") != 0) {
+intNumber = atoi (intString);
+printf ("Converted number is %d\n", intNumber);
+}
+}
+ while (strcmp (intString, "9") != 0); 
+printf("*** End of Converting Strings to int Demo ***\n\n");
+ }
+

commit 6151b4d3381b9bbe41df18417cdc1ba5a8cd291d
Author: annaemerick <anna.emerick@gmail.com>
Date:   Thu Mar 27 13:20:26 2025 -0400

    Initial commit

diff --git a/README.md b/README.md
new file mode 100644
index 0000000..846ed16
--- /dev/null
+++ b/README.md
@@ -0,0 +1 @@
+# CPR_FinalProject
\ No newline at end of file
